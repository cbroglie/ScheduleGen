#!/usr/bin/env python

import copy
import pdb
from libsched import schedule

def assign(schedule, week, matchup):
    """Eliminate all matchups other than the given one from the provided week,
    and propagate. Return the schedule, except return False if a contradiction
    is detected."""
    schedule.debug("Assigning %r to week %d", matchup, week)
    for team in matchup:
        for matchup2 in copy.copy(schedule.teams[team][week]):
            if matchup2 == matchup:
                continue
            if not eliminate(schedule, week, matchup2):
                return False
        # Check how many times we can play this team. Eliminate matchups from
        # all other weeks if we have hit the max, or all weeks within the min
        # rematch buffer if we are under the limit still.
        otherTeam = list(set(matchup) - set([team]))[0]
        numMatchups = schedule.get_num_matchups(team, otherTeam)
        maxMatchups = schedule.get_matchup_max(team, otherTeam)
        for week2 in range(schedule.num_weeks):
            if week2 == week or len(schedule.teams[team][week2]) == 1:
                continue
            for matchup2 in copy.copy(schedule.teams[team][week2]):
                if set(matchup2) & set([otherTeam]):
                    if numMatchups >= maxMatchups:
                        schedule.verbose("Removing %r b/c team %d plays team %d %d times which is >= max of %d", matchup2, team, otherTeam, numMatchups, maxMatchups)
                        if not eliminate(schedule, week2, matchup2):
                            return False
                    if abs(week2 - week) <= schedule.min_weeks_between_matchups:
                        schedule.verbose("Removing %r b/c team %d plays team %d %d weeks apart, which is less than the min of %d", matchup2, team, otherTeam, abs(week2 - week), schedule.min_weeks_between_matchups)
                        if not eliminate(schedule, week2, matchup2):
                            return False
        # If we are over the max home games, eliminate home matchups from other
        # unassigned weeks.
        if schedule.get_num_home_games(team) >= ((schedule.num_weeks + 1) & ~0x1) / 2:
            for week2 in range(schedule.num_weeks):
                if week2 != week and len(schedule.teams[team][week2]) > 1:
                    for matchup2 in copy.copy(schedule.teams[team][week2]):
                        if matchup2[0] == team:
                            schedule.verbose("Removing %r b/c we have reached the max home games for team %d", matchup2, team)
                            if not eliminate(schedule, week2, matchup2):
                                return False
        # Same for away games.
        if schedule.get_num_away_games(team) >= ((schedule.num_weeks + 1) & ~0x1) / 2:
            for week2 in range(schedule.num_weeks):
                if week2 != week and len(schedule.teams[team][week2]) > 1:
                    for matchup2 in copy.copy(schedule.teams[team][week2]):
                        if matchup2[1] == team:
                            schedule.verbose("Removing %r b/c we have reached the max away games for team %d", matchup2, team)
                            if not eliminate(schedule, week2, matchup2):
                                return False
    # Check if we violated any constraints by removing other matchups.
    for team in schedule.teams:
        if not schedule.valid(team):
            return False
    return schedule

def eliminate(schedule, week, matchup):
    """Elimniate matchup from the given week. Propagate when possible. Return
    schedule, except return False if a contradiction is detected."""
    schedule.debug("Removing %r from week %d", matchup, week)
    for team in matchup:
        # TODO: Use lookahead to fail faster
        if matchup in schedule.teams[team][week]:
            schedule.remove_matchup(team, week, matchup)
        else:
            continue

        # Contradiction: removed last value.
        if len(schedule.teams[team][week]) == 0:
            schedule.debug("Backtracking b/c we removed the last matchup for a week")
            return False

        # If a slot is reduced to one value, eliminate the value from its peers.
        if len(schedule.teams[team][week]) == 1:
            matchup2 = schedule.teams[team][week][0]
            #print "%r is the last matchup in week %d for team %d" % (matchup2, week, team)
            #pdb.set_trace()
            for team2 in schedule.teams:
                if not set([team2]) & set(matchup2):
                    for matchup3 in copy.copy(schedule.teams[team2][week]):
                        if set(matchup2) & set(matchup3):
                            if not eliminate(schedule, week, matchup3):
                                return False
    return schedule

def search(schedule):
    """Using depth first search and propagation, try all possible values."""
    if schedule is False:
        return False # Already failed earlier
    if all(len(schedule.teams[team][week]) == 1
           for team in schedule.teams
           for week in range(schedule.num_weeks)):
        return schedule # Solved
    # Choose the team and week with the fewest possibilities
    count, team, week = min((len(schedule.teams[team][week]), team, week)
                            for team in schedule.teams
                            for week in range(schedule.num_weeks) if len(schedule.teams[team][week]) > 1)
    schedule.debug("Searching team %d for week %d", team, week)
    # TODO: Make lighterweight version of deepcopy (arrays and dicts can be
    # shallow copies)
    for matchup in schedule.teams[team][week]:
        result = search(assign(copy.deepcopy(schedule), week, matchup))
        if result:
            return result
    return False

if __name__ == "__main__":
    schedule = schedule.Schedule()
    schedule.num_weeks = 13
    schedule.num_teams = 16
    schedule.min_matchups = 0
    schedule.max_matchups = 1
    schedule.min_weeks_between_matchups = 0
    schedule.init()

    schedule = search(schedule)
    assert schedule is not False

    schedule.display()
    schedule.test()